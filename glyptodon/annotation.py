# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_annotation.ipynb.

# %% auto 0
__all__ = ['createAnnotationInfo', 'createAnnotationTextArea', 'createPageSelector', 'createSaveShapes', 'createSaveAnnotation',
           'createNextTab', 'createAnnotationFigure', 'createFigureLayout', 'createTextareaLayout',
           'createAnnotationLayout']

# %% ../nbs/04_annotation.ipynb 5
from dash import dcc, html
import dash_bootstrap_components as dbc
import plotly.express as px
import cv2

# %% ../nbs/04_annotation.ipynb 7
def createAnnotationInfo():
    return dbc.Card(
        dbc.CardBody(
            [
                html.H1("Annotation"),
                html.P(
                    "This page allows you to annotate a manuscript page with Lines and Boxes. "
                    "For each line of a manuscript, draw a line through the text. "
                    "For each word of a manuscript, draw a box around the word. "
                    "Once you have drawn all the shapes, click the Save Shapes button. "
                ),
                html.Br(),
                html.P(
                    "After the shapes have been saved, the text editing pane on the right will allow you to transcribe the manuscript with the annotations. "
                    "For each line you draw, numbers will appear in the text area. "
                    "Leaving a space after each line number, write the words corresponding to that line inside the area. "
                    "Once you have finished the transcription of a page, click the Save Transcription button. "
                    "You can now select a different page to annotate and transcribe."
                )
            ]
        )
    )

# %% ../nbs/04_annotation.ipynb 10
def createAnnotationTextArea():
    return dbc.Textarea(id="annotation-text-area",value="Enter transcription text here!",style={"width":"100%","height":800})

# %% ../nbs/04_annotation.ipynb 13
def createPageSelector():
    return dcc.Dropdown(id="page-selector")

# %% ../nbs/04_annotation.ipynb 16
def createSaveShapes():
    return dbc.Button("Save Shapes", color="info", id="save-shapes")

# %% ../nbs/04_annotation.ipynb 18
def createSaveAnnotation():
    return dbc.Button("Save Transcription", color="info", id="save-annotation")

# %% ../nbs/04_annotation.ipynb 20
def createNextTab():
    return dbc.Button("Next Tab", color="primary", id="next-tab")

# %% ../nbs/04_annotation.ipynb 22
def createAnnotationFigure(path):
    img = cv2.imread(path)
    # This reorders the color channels (the first two indices relate to the intensity values of individual colors while the last index indicates what
    img = img[:,:,::-1]
    fig = px.imshow(img)
    fig.update_layout(dragmode='drawrect',
                  # style of new shapes
                  newshape=dict(line_color='grey',
                                opacity=0.6))
    return fig

# %% ../nbs/04_annotation.ipynb 26
def createFigureLayout():
    return dbc.Card(
        [
            createPageSelector(),
            dcc.Graph(
                id="annotation-figure",
                config={
                    "modeBarButtonsToAdd": [
                        "drawline",
                        "drawrect",
                        "eraseshape",
                    ]
                },
                style={
                    "height": 800,
                    "width": 800,
                },
            ),
            createSaveShapes(),
        ]
    )

# %% ../nbs/04_annotation.ipynb 29
def createTextareaLayout():
    return dbc.Card([createAnnotationTextArea(), createSaveAnnotation()])

# %% ../nbs/04_annotation.ipynb 32
def createAnnotationLayout():
    return html.Div(
        [
            createAnnotationInfo(),
            html.Br(),
            dbc.Card(
                [
                    dbc.Container(
                        [
                            dbc.Row(
                                children=[
                                    dbc.Col(createFigureLayout(), md=7),
                                    dbc.Col(createTextareaLayout(), md=5),
                                ]
                            )
                        ],
                        style={
                            "height": "95%",
                            "width": "95%",
                        },
                    ),
                    createNextTab(),
                ]
            ),
        ]
    )
