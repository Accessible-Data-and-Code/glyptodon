# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_app.ipynb.

# %% auto 0
__all__ = ['selectionKey', 'manuscriptSelect', 'selectionInfo', 'finalizeSelection', 'metadata', 'inputObjects', 'centuries',
           'centuriesSlider', 'uploadImages', 'uploadManuscripts', 'informationInfo', 'saveNContinue',
           'annotationTextArea', 'pageSelector', 'saveShapes', 'saveAnnotation', 'exportInfo', 'exportName',
           'directoryOptions', 'exportButton', 'exportDownload', 'app', 'newManuscript', 'selectedManuscript',
           'selectManuscript', 'finalizeSelectionCallback', 'pageSelectorCallback', 'saveShapesCallback']

# %% ../nbs/07_app.ipynb 4
from dash import Dash, State, Input, Output, callback, dcc, html
from .annotation import *
from .classes import *
from .export import *
from .information import *
from .manuscriptFiles import *
from .selection import *
import re
import os

# %% ../nbs/07_app.ipynb 6
#################
### SELECTION ###
#################
selectionKey, manuscriptSelect = createManuscriptSelect()
selectionInfo = createSelectionInfo()
finalizeSelection = createFinalizeSelection()


###################
### INFORMATION ###
###################
# the ids for objects in inputObjects are: "work", "author", "language", "country", "city", "institution"
metadata, inputObjects = createInputObjects()
centuries, centuriesSlider = createCenturiesSlider()
uploadImages, uploadManuscripts = createUploadObjects()
informationInfo = createInformationInfo()
# the id for saveNContinue is "save-and-continue"
saveNContinue = createSaveNContinue()


##################
### ANNOTATION ###
##################
annotationTextArea = createAnnotationTextArea()
pageSelector = createPageSelector()
saveShapes = createSaveShapes()
saveAnnotation = createSaveAnnotation()


##############
### EXPORT ###
##############
exportInfo = createExportInfo()
exportName = createExportName()
directoryOptions = createDirectoryOptions()
exportButton = createExportButton()
exportDownload = createExportDownload()

# %% ../nbs/07_app.ipynb 8
app = Dash(__name__)
app.layout = html.Div(
    [
        dcc.Tabs(
            id="tabs-object",
            value="selection",
            children=[
                dcc.Tab(
                    label="Selection",
                    value="selection",
                    children=[
                        html.Div(
                            [
                                selectionInfo,
                                html.Br(),
                                manuscriptSelect,
                                html.Br(),
                                finalizeSelection,
                            ]
                        )
                    ],
                ),
                dcc.Tab(
                    label="Information",
                    value="information",
                    children=[
                        html.Div(
                            [
                                informationInfo,
                                html.Br(),
                                html.Div(inputObjects),
                                html.Br(),
                                html.Div(
                                    [
                                        uploadImages,
                                        uploadManuscripts,
                                    ],
                                    id="uploader-container",
                                ),
                                html.Br(),
                                centuriesSlider,
                                html.Br(),
                                saveNContinue,
                            ]
                        )
                    ],
                ),
                dcc.Tab(
                    label="Annotation",
                    value="annotation",
                    children=[
                        html.Div(
                            [
                                pageSelector,
                                dcc.Graph(
                                    id="annotation-figure",
                                    config={
                                        "modeBarButtonsToAdd": [
                                            "drawline",
                                            "drawrect",
                                            "eraseshape",
                                        ]
                                    },
                                    style={
                                        "height": 900,
                                        "width": 800,
                                    },
                                ),
                                saveShapes,
                                annotationTextArea,
                                saveAnnotation,
                            ]
                        )
                    ],
                ),
                dcc.Tab(
                    label="Export",
                    value="export",
                    children=[
                        html.Div(
                            [
                                exportInfo,
                                exportName,
                                directoryOptions,
                                exportButton,
                                exportDownload,
                            ]
                        )
                    ],
                ),
            ],
        ),
        html.Div(id="current-tab"),
        html.Div(
            id="dummy-output",
            style={"display": "none"},
        ),
    ]
)

# %% ../nbs/07_app.ipynb 10
newManuscript = False
selectedManuscript = selectionKey[
    "Stavronikita Monastery Greek handwritten document Collection no.53"
]


@callback(
    Output("work", "placeholder",),
    Output("author", "placeholder",),
    Output("language", "placeholder",),
    Output("country", "placeholder",),
    Output("city", "placeholder",),
    Output("institution", "placeholder",),
    Output("centuries-slider", "value",),
    Output("uploader-container","style"), # This determines if uploaders are displayed
    Input("manuscript-select", "value"),
    suppress_callback_exceptions=True,
)
def selectManuscript(work):
    if work == "Create New Manuscript":
        newManuscript = True
        selectedManuscript = None
        return "", "", "", "", "", "", [1, 20], {"display": "none"}
    else:
        selectedManuscript = selectionKey[work]
        work = selectedManuscript[1]["Work"]
        author = selectedManuscript[1]["Author"]
        language = selectedManuscript[1]["Language"]
        country = selectedManuscript[1]["Country"]
        city = selectedManuscript[1]["City"]
        institution = selectedManuscript[1]["Institution"]

        ### Converts the string containing centuries into list containing the centuries as integers
        # This stores the string as a list of words. There are strings with two words and four words
        centuriesAsList = selectedManuscript[1]["Centuries"].split()

        # This picks out the relevant words and strips them of everything but the integer values
        if len(centuriesAsList) == 2:
            centuriesValue = [
                int(re.sub("[^0-9]", "", centuriesAsList[0])),
                int(re.sub("[^0-9]", "", centuriesAsList[0])),
            ]
        else:
            centuriesValue = [
                int(re.sub("[^0-9]", "", centuriesAsList[0])),
                int(re.sub("[^0-9]", "", centuriesAsList[2])),
            ]
        return work, author, language, country, city, institution, centuriesValue, {"display": "block"}

# %% ../nbs/07_app.ipynb 12
@callback(
    Output("page-selector", "options"),
    Output("page-selector", "value"),
    Output("tabs-object","value"),
    Input("finalize-selection", "n_clicks"),
    prevent_initial_call=True,
)
def finalizeSelectionCallback(clicks):
    dropdownOptions = []
    relativePaths = manuscriptImages(selectedManuscript[0])

    index = 1
    for path in relativePaths:
        dropdownOptions.append({"label": f"Page {index}", "value": path})
        index = index + 1

    return dropdownOptions, dropdownOptions[0]["value"], "information"

# %% ../nbs/07_app.ipynb 14
@callback(
    Output("annotation-figure", "figure"),
    Input("page-selector", "value"),
    prevent_initial_call=True,
)
def pageSelectorCallback(path):
    fig = createAnnotationFigure(path)

    imageName = path.split("/")[-1]  # This takes the file name in the directory
    imageName = imageName.split(".")[0]  # This assumes

    statesDirectory = os.path.join(selectedManuscript[0], "states")
    linesDirectory = os.path.join(statesDirectory, "lines")
    bboxesDirectory = os.path.join(statesDirectory, "bboxes")
    
    # Instantiate lines from csv and add them to figure
    for file in os.listdir(linesDirectory):
        fileName = file.split(".")[0]
        if fileName == imageName:
            figLines = csvToLines(os.path.join(linesDirectory, file))

            for line in figLines:
                fig.add_shape(
                    type=line.type,
                    x0=line.x0,
                    y0=line.y0,
                    x1=line.x1,
                    y1=line.y1,
                    line=line.line,
                    opactiy=line.opacity,
                )

    # Instantiate bboxes from csv and add them to figure
    for file in os.listdir(bboxesDirectory):
        fileName = file.split(".")[0]
        if fileName == imageName:
            figBBoxes = csvToBBoxes(os.path.join(bboxesDirectory, file))
            
            for bbox in figBBoxes:
                fig.add_shape(
                    type=bbox.type,
                    x0=bbox.x0,
                    y0=bbox.y0,
                    x1=bbox.x1,
                    y1=bbox.y1,
                    line=bbox.line,
                    opacity=bbox.opacity,
                )

    return fig

# %% ../nbs/07_app.ipynb 16
@callback(
    Output("dummy-output","children"),
    Input("save-shapes", "n_clicks"),
    State("annotation-figure", "relayoutData"),
    State("page-selector", "value"),
    prevent_initial_call=True,
)
def saveShapesCallback(clicks, shapes, path):
    dictLines = []
    dictBBoxes = []
    for shape in shapes:
        if shape["type"] == "line":
            dictLines.append(shape)
        if shape["type"] == "rect":
            dictBBoxes.append(shape)

    bboxes = []
    lines = []
    for line in dictLines:
        bboxes.append([])
        lines.append(
            Line(
                x0=int(line["x0"]),
                y0=int(line["y0"]),
                x1=int(line["x1"]),
                y1=int(line["y1"]),
            )
        )

    Line.sortLines(lines)

    tempBBoxes = []
    for bbox in dictBBoxes:
        tempBBoxes.append(
            BBox(
                x0=int(bbox["x0"]),
                y0=int(bbox["y0"]),
                x1=int(bbox["x1"]),
                y1=int(bbox["y1"]),
            )
        )

    for line in lines:
        for bbox in tempBBoxes:
            if bbox.isLine(line):
                bboxes[line.index - 1].append(bbox)

    flattenedBBoxes = []
    for line in bboxes:
        BBox.sortBBoxes(line)
        flattenedBBoxes = flattenedBBoxes + line

    fig = createAnnotationFigure(path)

    imageName = path.split("/")[-1]  # This takes the file name in the directory
    imageName = imageName.split(".")[0]  # This assumes

    statesDirectory = os.path.join(selectedManuscript[0], "states")
    linesDirectory = os.path.join(statesDirectory, "lines")
    bboxesDirectory = os.path.join(statesDirectory, "bboxes")

    Line.linesToCSV(linesDirectory, lines, imageName)
    BBox.bboxesToCSV(bboxesDirectory, flattenedBBoxes, imageName)
    
    dummy = ["1","2","3"]
    return dummy

# %% ../nbs/07_app.ipynb 19
if __name__ == "__main__":
    app.run(debug=True)
