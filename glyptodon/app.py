# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_app.ipynb.

# %% auto 0
__all__ = ['app', 'selectionKey', 'manuscriptSelect', 'selectionInfo', 'finalizeSelection', 'metadata', 'inputObjects',
           'centuries', 'centuriesSlider', 'uploadImages', 'uploadeManuscripts', 'informationInfo', 'saveNContinue',
           'annotationTextArea', 'pageSelector', 'exportInfo', 'exportName', 'directoryOptions', 'exportButton',
           'exportDownload', 'renderContent']

# %% ../nbs/07_app.ipynb 4
from dash import Dash, Input, Output, callback, dcc, html
from .annotation import *
from .classes import *
from .export import *
from .information import *
from .manuscriptFiles import *
from .selection import *

# %% ../nbs/07_app.ipynb 6
app = Dash(__name__)
app.layout = html.Div(
    [
        dcc.Tabs(
            id="tabs-object",
            value="selection",
            children=[
                dcc.Tab(label="Selection", value="selection"),
                dcc.Tab(label="Information", value="information"),
                dcc.Tab(label="Annotation", value="annotation"),
                dcc.Tab(label="Export", value="export"),
            ],
        ),
        html.Div(id="current-tab"),
    ]
)

# %% ../nbs/07_app.ipynb 8
#################
### SELECTION ###
#################
selectionKey, manuscriptSelect = createManuscriptSelect()
selectionInfo = createSelectionInfo()
finalizeSelection = createFinalizeSelection()


###################
### INFORMATION ###
###################
# the ids for objects in inputObjects are: "work", "author", "language", "country", "city", "institution"
metadata, inputObjects = createInputObjects()
centuries, centuriesSlider = createCenturiesSlider()
uploadImages, uploadeManuscripts = createUploadObjects()
informationInfo = createInformationInfo()
# the id for saveNContinue is "save-and-continue"
saveNContinue = createSaveNContinue()


##################
### ANNOTATION ###
##################
annotationTextArea = createAnnotationTextArea()
pageSelector = createPageSelector()


##############
### EXPORT ###
##############
exportInfo = createExportInfo()
exportName = createExportName()
directoryOptions = createDirectoryOptions()
exportButton = createExportButton()
exportDownload = createExportDownload()

# %% ../nbs/07_app.ipynb 12
@callback(Output("current-tab", "children"), Input("tabs-object", "value"))
def renderContent(tab):
    if tab == "selection":
        return html.Div(
            [
                selectionInfo,
                html.Br(),
                manuscriptSelect,
                html.Br(),
                finalizeSelection,
            ]
        )
    elif tab == "information":
        if newManuscript:
            return html.Div(
                [
                    informationInfo,
                    html.Br(),
                    html.Div(inputObjects),
                    html.Br(),
                    html.Div(
                        [
                            uploadImages,
                            uploadManuscripts,
                        ]
                    ),
                    html.Br(),
                    saveNContinue,
                ]
            )
        else:
            return html.Div(
                [
                    informationInfo,
                    html.Br(),
                    html.Div(inputObjects),
                    html.Br(),
                    saveNContinue,
                ]
            )          
    elif tab == "annotation":
        return html.Div(
            [
                dcc.Graph(
                    id="annotation-figure",
                    config={"modeBarButtonsToAdd": ["drawline", "drawrect", "eraseshape"]},
                    style={"height":900,
                          "width":800,
                         },
                ),
                pageSelector,
                annotationTextArea,
            ]
        )
    elif tab == "export":
        return html.Div(
            [
                exportInfo,
                exportName,
                directoryOptions,
                exportButton,
                exportDownload,
            ]
        )

# %% ../nbs/07_app.ipynb 14
if __name__ == "__main__":
    app.run(debug=True)
