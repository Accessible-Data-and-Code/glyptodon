# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_information.ipynb.

# %% auto 0
__all__ = ['createTextWidgets', 'createCenturiesWidget', 'createUploaders', 'createInformationInfo', 'Information']

# %% ../02_information.ipynb 4
import ipywidgets as widgets
import param
import panel as pn
pn.extension('ipywidgets')

import glyptodon.widgetCalls as wc
from .manuscriptFiles import *

# %% ../02_information.ipynb 6
def createTextWidgets():
    textWidgets = []
    metadata = ['Work','Author','Language','Country','City','Institution']
    widgeDictionary = {}
    
    for data in metadata:
        textWidgets.append(wc.textWidge(data))
        widgeDictionary[data] = textWidgets[-1]
    
    return metadata, textWidgets

# %% ../02_information.ipynb 9
def createCenturiesWidget():
    centuries = ['1st','2nd','3rd',] + [f'{i}th' for i in range(4,21)]
    
    centuriesWidget = widgets.SelectionRangeSlider(options = centuries,
                                                   index = (0,19),
                                                   description = 'Centuries',
                                                   layout = widgets.Layout(height = 'auto',
                                                                           width = '350px'
                                                                          )
                                                  )
    return centuriesWidget

# %% ../02_information.ipynb 12
def createUploaders():
    upImages = widgets.FileUpload(accept = '',
                                  multiple = True,
                                  description = 'Upload Manuscript Images',
                                  layout = widgets.Layout(height='auto',
                                                          width='auto'
                                                         )
                                 )
    
    upTranscripts = widgets.FileUpload(accept = '',
                                       multiple = True,
                                       description = 'Upload Manuscript Transcriptions',
                                       layout = widgets.Layout(height='auto',
                                                               width='auto'
                                                              )
                                      )
    return upImages, upTranscripts

# %% ../02_information.ipynb 15
def createInformationInfo():
    return widgets.HTML(value = "<h2>Info Pane</h2>\
                                <p>This menu allows you to upload new manuscripts and access previously uploaded manuscripts.\
                                The uploader will accept only .xml and image files.\
                                For testing purposes, it only accepts images right now.<p>",
                       layout = widgets.Layout(max_width = '600px'
                                              )
                       )

# %% ../02_information.ipynb 29
class Information(param.Parameterized):
    
    newManClicked = param.Boolean(default = False)
    # Set this to a default manuscript ASAP
    selectedManuscript = param.List(default = ['/home/dc/glyptodon/manuscripts/stvrnktmnstrygrkcllctnn.53',
                                               {'Work': 'Stavronikita Monastery Greek handwritten document Collection no.53',
                                                'Author': '',
                                                'Language': 'Greek',
                                                'Country': 'Greece',
                                                'City': 'Mount Athos',
                                                'Institution': 'Stavronikita Monastery',
                                                'Centuries': '14th Century'
                                               }
                                              ]
                                   )
    
    @param.output('manuscriptDirectory',param.String)
    def informationOutput():
        return selectedManuscript[0]
    
    def panel(self):
        self.metadata, self.textWidgets = createTextWidgets()
        
        textRowOne = pn.Row(self.textWidgets[0], self.textWidgets[1])
        textRowTwo = pn.Row(self.textWidgets[2], self.textWidgets[3])
        textRowThree = pn.Row(self.textWidgets[4], self.textWidgets[5])
        
        self.textWidgets[0].value, self.textWidgets[1].value = self.selectedManuscript[1]['Work'], self.selectedManuscript[1]['Author']
        self.textWidgets[2].value, self.textWidgets[3].value = self.selectedManuscript[1]['Language'], self.selectedManuscript[1]['Country']
        self.textWidgets[4].value, self.textWidgets[5].value = self.selectedManuscript[1]['City'], self.selectedManuscript[1]['Institution']
        
        self.centuriesWidget = createCenturiesWidget()
        # This takes the Centuries data and parses it based on if the work is split over centuries
        centuries = self.selectedManuscript[1]['Centuries'].split()
        if len(centuries) == 2:
            self.centuriesWidget.value = (centuries[0], centuries[0])
        else:
            self.centuriesWidget.value = (centuries[0], centuries[2])
        
        self.saveButton = wc.orangeButton('Save Manuscript Data')
        self.saveButton.on_click(self.on_click_save)
        bottomRow = pn.Row(self.centuriesWidget, self.saveButton)
        
        columnRight = pn.Column(textRowOne, textRowTwo, textRowThree, bottomRow)
        self.informationInfo = createInformationInfo()
        
        if self.newManClicked:
            self.upImages, self.upTranscripts = createUploaders()
            uploaders = pn.Row(self.upImages, self.upTranscripts)
            
            columnLeft = pn.Column(self.informationInfo, uploaders)
            layout = pn.Row(columnLeft, columnRight)
        else:
            self.informationInfo = createInformationInfo()
            layout = pn.Row(self.informationInfo, columnRight)
        
        return layout
    
    def on_click_save(self, null):
        directory = self.selectedManuscript[0]

        updateValues = {}
        for widget in self.textWidgets:
            updateValues[widget.description] = widget.value

        if self.centuriesWidget.value[0] == self.centuriesWidget.value[1]:
            updateValues['Centuries'] = self.centuriesWidget.value[0] + ' Century'
        else:
            updateValues['Centuries'] = self.centuriesWidget.value[0] + ' to ' + self.centuriesWidget.value[1] + ' Century'

        updateMetadata(directory, updateValues)
