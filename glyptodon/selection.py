# AUTOGENERATED! DO NOT EDIT! File to edit: ../01_selection.ipynb.

# %% auto 0
__all__ = ['createManuscriptSelect', 'createSelectionInfo', 'Selection']

# %% ../01_selection.ipynb 4
import ipywidgets as widgets
import param
import panel as pn
pn.extension('ipywidgets')

from .widgetCalls import *
from .manuscriptFiles import currentManuscripts

# %% ../01_selection.ipynb 6
def createManuscriptSelect():
    manuscripts = currentManuscripts()
    
    selectionKey = {}
    selectionNames = []
    for manuscript in manuscripts:
        selectionNames.append(manuscript[1]['Work'])
        selectionKey[selectionNames[-1]] = manuscript
        
    manuscriptSelect = widgets.Select(options = selectionNames,
                                      value = 'Stavronikita Monastery Greek handwritten document Collection no.53',
                                      rows = 10,
                                      disabled = False,
                                      layout = widgets.Layout(height = 'auto',
                                                              width = '425px'
                                                             )
                                     )
    
    return selectionKey, manuscriptSelect

# %% ../01_selection.ipynb 10
def createSelectionInfo():
    return widgets.HTML(value = "<h2>Info Pane</h2>\
                                <p>This menu allows you to upload new manuscripts and access previously uploaded manuscripts.\
                                The uploader will accept only .xml and image files.\
                                For testing purposes, it only accepts images right now.<p>",
                       layout = widgets.Layout(max_width = '600px')
                       )

# %% ../01_selection.ipynb 27
class Selection(param.Parameterized):
    
    newManClicked = False
    # Set this to a default manuscript ASAP
    selectedManuscript = ['/home/dc/glyptodon/manuscripts/stvrnktmnstrygrkcllctnn.53',
                          {'Work': 'Stavronikita Monastery Greek handwritten document Collection no.53',
                           'Author': '',
                           'Language': 'Greek',
                           'Country': 'Greece',
                           'City': 'Mount Athos',
                           'Institution': 'Stavronikita Monastery',
                           'Centuries': '14th Century'
                          }
                         ]
    
    # This is the output for the class
    @param.output(('newManClicked', param.Boolean),('selectedManuscript', param.List))
    def selectionOutput(self):
        return self.newManClicked, self.selectedManuscript
    
    
    # This functions like the standard __init__ function
    def panel(self):
        self.newMan = tealButton('Create Manuscript')
        self.selMan = blueButton('Select Manuscript')
        
        # Binding buttons to functions that will be patched later
        self.newMan.on_click(self.on_click_newMan)
        self.selMan.on_click(self.on_click_selMan)
        
        buttons = pn.Row(self.selMan, self.newMan)

        self.selectionKey, self.manuscriptSelect = createManuscriptSelect()

        selections = pn.Column(self.manuscriptSelect, buttons)
        return pn.Row(createSelectionInfo(), selections)

    def on_click_selMan(self, null):
        if len(self.selectedManuscript) == 0:
            self.selectedManuscript = self.selectionKey[self.manuscriptSelect.value]
            self.selMan.description = 'Select Different Manuscript'
        else:
            self.selectedManuscript = self.selectionKey[self.manuscriptSelect.value]

    def on_click_newMan(self, null):
        if self.newManClicked == False:
            self.newManClicked = True
            self.newMan.description = "Don't Create Manuscript"
        else:
            self.newManClicked = False
            self.newMan.description = 'Create Manuscript'
